name: GEM5 Test

on:
  workflow_dispatch:
    inputs:
      script_path:
        required: true
        type: string
        default: "../gem5_config_kmhv2.sh"
      benchmark_type:
        required: true
        type: string
        description: "Benchmark type: spec06-0.8c, spec06-1.0c, spec17-1.0c, spec06-rvv-1.0c or spec06int-rvv-0.8c"
        default: "spec06-0.8c"
      check_result:
        required: false
        type: boolean
        description: "Whether to check result (failed ckpts)"
        default: true
jobs:
  run-GEM5-test:
    runs-on: [self-hosted]
    steps:
      - uses: actions/checkout@v4
      - name: Clone GEM5 submodule
        run: |
          export CKPTFLOW_HOME=$(pwd)
          git submodule update --init artifacts/GEM5
      - name: Set benchmark configuration
        id: config
        run: |
          case "${{ inputs.benchmark_type }}" in
            "spec06-0.8c")
              echo "checkpoint_list=/nfs/home/share/gem5_ci/spec06_cpts/spec_0.8c_int.lst" >> $GITHUB_OUTPUT
              echo "checkpoint_root_node=/nfs/home/share/jiaxiaoyu/simpoint_checkpoint_archive/spec06_rv64gcb_O3_20m_gcc12.2.0-intFpcOff-jeMalloc/checkpoint-0-0-0" >> $GITHUB_OUTPUT
              echo "score_script=gem5-score-ci.sh" >> $GITHUB_OUTPUT
              echo "cluster_config=/nfs/home/share/gem5_ci/spec06_cpts/cluster-0-0.json" >> $GITHUB_OUTPUT
              echo "artifact_name=performance-score-spec06-0.8c" >> $GITHUB_OUTPUT
              echo "comment=run 80% coverage spec06 checkpoints, 500+ checkpoints" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Error: Invalid benchmark_type '${{ inputs.benchmark_type }}'. Must be one of: spec06-0.8c, spec06-1.0c, spec17-1.0c, spec06-rvv-1.0c or spec06int-rvv-0.8c"
              exit 1
              ;;
          esac
      - name: Build DRAMSim
        run: |
          export CKPTFLOW_HOME=$(pwd)
          cd artifacts/GEM5
          export GEM5_HOME=$(pwd)
          cd ext/dramsim3
          if [ ! -d "DRAMsim3/.git" ]; then
            git clone https://github.com/umd-memsys/DRAMsim3.git DRAMsim3
          fi
          cd DRAMsim3 && mkdir -p build
          cd build
          cmake ..
          make -j 48
          cd $GEM5_HOME
      - name: Build GEM5 fast
        run: |
          echo "::group::[Build GEM5 fast]"
          export CKPTFLOW_HOME=$(pwd)
          cd artifacts/GEM5
          export GEM5_HOME=$(pwd)
          export GCBV_REF_SO="/nfs/home/share/gem5_ci/ref/normal/riscv64-nemu-notama-tvalref-so"
          # use pgo profile to build gem5, use simple vector decode strategy in scons
          bash util/pgo/basic_pgo_new_vector.sh
          echo "::endgroup::"


      - name: XS-GEM5 - Run performance test
        # ${{ steps.config.outputs.comment }}
        run: |
          export CKPTFLOW_HOME=$(pwd)
          cd artifacts/GEM5
          export GCBV_REF_SO="/nfs/home/share/gem5_ci/ref/normal/riscv64-nemu-notama-tvalref-so"
          export GCB_RESTORER=""
          export GEM5_HOME=$(pwd)
          export GEM5_BUILD_TYPE=fast
          rm -rf $GEM5_HOME/util/xs_scripts/test
          mkdir -p $GEM5_HOME/util/xs_scripts/test
          cd $GEM5_HOME/util/xs_scripts/test
          cp $CKPTFLOW_HOME/artifacts/gem5_config_kmhv2.sh ../gem5_config_kmhv2.sh
          bash ../parallel_sim.sh `realpath ${{ inputs.script_path }}` \
            ${{ steps.config.outputs.checkpoint_list }} \
            ${{ steps.config.outputs.checkpoint_root_node}} \
            spec_all
      - name: Setup gem5_data_proc environment
        run: |
          # 克隆数据处理仓库到 CI 工作目录
          cd $GITHUB_WORKSPACE
          git clone https://github.com/shinezyy/gem5_data_proc
      - name: Check performance test result
        run: |
          # 添加yanyue的 Python 包路径, 包含pandas等
          export PYTHONPATH=/nfs/home/yanyue/.local/lib/python3.10/site-packages:$PYTHONPATH
          # 每次run 会进入新的shell, 需要重新设置GEM5_HOME
          export CKPTFLOW_HOME=$(pwd)
          cd artifacts/GEM5
          export GEM5_HOME=$(pwd)
          cd $GITHUB_WORKSPACE/gem5_data_proc
          # 使用已有的数据spec_all生成测试报告
          bash example-scripts/${{ steps.config.outputs.score_script }} \
            $GEM5_HOME/util/xs_scripts/test/spec_all \
            ${{ steps.config.outputs.cluster_config }} \
            > $GITHUB_WORKSPACE/score.txt
          # 提取最后42行score信息
          echo "### performance test result :rocket:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -n 42 $GITHUB_WORKSPACE/score.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          # 提取关键指标
          FINAL_SCORE=$(grep "Estimated Int score per GHz:" $GITHUB_WORKSPACE/score.txt | awk '{print $NF}')
          echo "### Key indicators" >> $GITHUB_STEP_SUMMARY
          echo "- Final Int score per GHz: **${FINAL_SCORE}**" >> $GITHUB_STEP_SUMMARY
          
          # 最后检查是否存在abort文件， 如果存在，打出前10个错误名字
          if find $GEM5_HOME/util/xs_scripts/test/spec_all -type f -name "abort" | grep -q .; then
            echo "### :x: Test Failures Detected!" >> $GITHUB_STEP_SUMMARY
            echo "Failed test count: $(find $GEM5_HOME/util/xs_scripts/test/spec_all -type f -name "abort" | wc -l)" >> $GITHUB_STEP_SUMMARY
            echo "First 10 failed tests:" >> $GITHUB_STEP_SUMMARY
            find $GEM5_HOME/util/xs_scripts/test/spec_all -type f -name "abort" | 
              sed 's|.*/\([^/]*\)/abort|\1|' |
              head -n 10 |
              while read -r line; do
                echo "- $line" >> $GITHUB_STEP_SUMMARY
              done
              if [ "${{ inputs.check_result }}" == "true" ]; then
                exit 1
              fi
          fi
      - name: Archive performance data
        if: always()
        run: |
          # Create archive directory with timestamp and commit
          ARCHIVE_ROOT="/nfs/home/xutongqiao/github-caches/cache_XiangShan-CkptFlow/GEM5-performance"
          BENCHMARK_DIR="${ARCHIVE_ROOT}/${{ inputs.benchmark_type }}"
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          RUN_NUMBER="${{ github.run_number }}"
          TARGET_DIR="${BENCHMARK_DIR}/${TIMESTAMP}_${COMMIT_SHORT}_run${RUN_NUMBER}"
          
          # Create target directory
          mkdir -p "$TARGET_DIR"
          
          # Archive entire spec_all directory with compression
          echo "Archiving performance data to $TARGET_DIR"
          tar -czf "$TARGET_DIR/spec_all.tar.gz" -C "$GITHUB_WORKSPACE/util/xs_scripts/test" spec_all
          
          # Also save score.txt for quick reference
          if [ -f "$GITHUB_WORKSPACE/score.txt" ]; then
            cp "$GITHUB_WORKSPACE/score.txt" "$TARGET_DIR/"
          fi
          
          # Save metadata
          echo "timestamp: $TIMESTAMP" > "$TARGET_DIR/metadata.txt"
          echo "commit: $(git rev-parse HEAD)" >> "$TARGET_DIR/metadata.txt"
          echo "commit_short: $COMMIT_SHORT" >> "$TARGET_DIR/metadata.txt"
          echo "branch: ${GITHUB_REF#refs/heads/}" >> "$TARGET_DIR/metadata.txt"
          echo "run_number: $RUN_NUMBER" >> "$TARGET_DIR/metadata.txt"
          echo "benchmark_type: ${{ inputs.benchmark_type }}" >> "$TARGET_DIR/metadata.txt"
          echo "workflow_run_id: ${{ github.run_id }}" >> "$TARGET_DIR/metadata.txt"
          
          # Auto cleanup: keep only last 50 runs for this benchmark type
          if [ -d "$BENCHMARK_DIR" ] && [ $(ls -1 "$BENCHMARK_DIR" 2>/dev/null | wc -l) -gt 50 ]; then
            echo "Cleaning up old performance data, keeping last 50 runs"
            # Use absolute paths to avoid accidental deletion if cd fails
            ls -1t "$BENCHMARK_DIR" | tail -n +51 | while read -r old_run; do
              if [ -n "$old_run" ] && [ -d "$BENCHMARK_DIR/$old_run" ]; then
                rm -rf "$BENCHMARK_DIR/$old_run"
                echo "Deleted: $BENCHMARK_DIR/$old_run"
              fi
            done
            echo "Cleanup completed"
          fi
          
          echo "Performance data archived successfully"
          echo "Archive size: $(du -sh "$TARGET_DIR/spec_all.tar.gz" | cut -f1)"
      - name: Upload score
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.config.outputs.artifact_name }}
          path: ${{ github.workspace }}/score.txt 